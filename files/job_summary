#!/usr/bin/python3

import sys,os,subprocess,shlex
import time,datetime
from os import path
from datetime import date
import numpy as np

def time_to_float(time):
    """ converts [dd-[hh:]]mm:ss time to seconds """
    if isinstance(time, float):
        return time
    days, hours = 0, 0

    if "-" in time:
        days = int(time.split("-")[0]) * 86400
        time = time.split("-")[1]
    time = time.split(":")

    if len(time) > 2:
        hours = int(time[0]) * 3600

    mins = int(time[-2]) * 60
    secs = float(time[-1])

    return days + hours + mins + secs

#Initial Settings
User = ""
num_j = {}
num_jgpu = {}
tot_cpu_hours = {}
tot_gpu_hours = {}
ave_core_use = {}
ave_cpu_req = {}
ave_cpu_eff = {}
ave_mem_use = {}
ave_mem_req = {}
ave_mem_eff = {}
ave_time_use = {}
ave_time_req = {}
ave_time_eff = {}
ave_wait_time = {}
ave_gpu_req = {}

nca_cpu = {}
ncd_cpu = {}
nf_cpu = {}
noom_cpu = {}
nto_cpu = {}
nca_gpu = {}
ncd_gpu = {}
nf_gpu = {}
noom_gpu = {}
nto_gpu = {}

MaxRSS = 0.

try:
  # Grab data from slurm
  proc = subprocess.Popen(
    'sacct -anP --units=G --format=User,Elapsed,ReqMem,AllocCPUS,ReqCPUS,Timelimit,State,TotalCPU,MaxRSS,Submit,Start,ReqTRES --state=CA,CD,F,OOM,TO -S {d}T00:00:00 -E {d}T23:59:59'.format(
      d = date.today()-datetime.timedelta(1)
    ).split(),
    stdout=subprocess.PIPE,
    universal_newlines=True
  )
except Exception:
  self.log.exception("error occured fetching job hash")
  exit
else:
  for line in proc.stdout:
    # Split out data
    (LUser, LElapsed, LReqMem, LAllocCPUS, LReqCPUS, LTimelimit, LState, LTotalCPU, LMaxRSS, LSubmit, LStart, LReqTRES) = line.strip().split('|')
    if LUser != "":
      # If this the start of a new Job permanently store data
      if User != "" and 'CANCELLED' not in State:
        ave_mem_use[User] = ave_mem_use[User] + MaxRSS
        ave_mem_req[User] = ave_mem_req[User] + ReqMem
        ave_mem_eff[User] = ave_mem_eff[User] + np.divide(MaxRSS, ReqMem, out=np.zeros_like(MaxRSS), where=ReqMem!=0)

      #Data
      User=LUser
      State=LState

      #Initialize Counters
      if User not in nca_cpu:
        num_j[User] = 0
        num_jgpu[User] = 0
        tot_cpu_hours[User] = 0.
        tot_gpu_hours[User] = 0.
        ave_core_use[User] = 0.
        ave_cpu_req[User] = 0.
        ave_cpu_eff[User] = 0.
        ave_mem_use[User] = 0.
        ave_mem_req[User] = 0.
        ave_mem_eff[User] = 0.
        ave_time_use[User] = 0.
        ave_time_req[User] = 0.
        ave_time_eff[User] = 0.
        ave_wait_time[User] = 0.
        ave_gpu_req[User] = 0.
        nca_cpu[User] = 0
        ncd_cpu[User] = 0
        nf_cpu[User] = 0
        noom_cpu[User] = 0
        nto_cpu[User] = 0
        nca_gpu[User] = 0
        ncd_gpu[User] = 0
        nf_gpu[User] = 0
        noom_gpu[User] = 0
        nto_gpu[User] = 0

      # Job State Counters
      if 'gres/gpu' in LReqTRES:
        if 'CANCELLED' in State:
          nca_gpu[User] = nca_gpu[User] + 1
        elif 'COMPLETED' in State:
          ncd_gpu[User] = ncd_gpu[User] + 1
        elif 'FAILED' in State:
          nf_gpu[User] = nf_gpu[User] + 1
        elif 'MEMORY' in State:
          noom_gpu[User] = noom_gpu[User] + 1
        elif 'TIME' in State:
          nto_gpu[User] = nto_gpu[User] + 1
      else:
        if 'CANCELLED' in State:
          nca_cpu[User] = nca_cpu[User] + 1
        elif 'COMPLETED' in State:
          ncd_cpu[User] = ncd_cpu[User] + 1
        elif 'FAILED' in State:
          nf_cpu[User] = nf_cpu[User] + 1
        elif 'MEMORY' in State:
          noom_cpu[User] = noom_cpu[User] + 1
        elif 'TIME' in State:
          nto_cpu[User] = nto_cpu[User] + 1

      if 'CANCELLED' not in State:
        # Job Count
        num_j[User] = num_j[User] + 1

        # Converting into appropriate units
        AllocCPUS = max(float(LAllocCPUS),float(LReqCPUS))
        ReqMem = LReqMem
        Elapsed = LElapsed
        TotalCPU = LTotalCPU
        Timelimit = LTimelimit
        Submit = LSubmit
        Start = LStart
        ReqTRES = LReqTRES
        MaxRSS = 0.

        ReqMem = float(ReqMem.replace('G', ''))

        TotalCPU = time_to_float(TotalCPU)
        Elapsed = time_to_float(Elapsed)
        Timelimit = time_to_float(Timelimit.replace('UNLIMITED','365-00:00:00').replace('Partition_Limit','365-00:00:00'))

        pattern = '%Y-%m-%dT%H:%M:%S'
        Submit = int(time.mktime(time.strptime(Submit, pattern)))
        Start = int(time.mktime(time.strptime(Start, pattern)))

        cpu_eff = np.divide(np.divide(TotalCPU, Elapsed, out=np.zeros_like(TotalCPU), where=Elapsed!=0), AllocCPUS)

        # Checking if there is a GPU
        gpu_req = ReqTRES.split(',')
        gpu_req = [s for s in gpu_req if s.startswith('gres/gpu=')]
        gpu_req = ''.join(gpu_req)

        if 'gres/gpu' in gpu_req:
          num_jgpu[User] = num_jgpu[User] + 1
          gpu_req = gpu_req.replace('gres/gpu=', '')
          ave_gpu_req[User] = ave_gpu_req[User] + float(gpu_req)
          tot_gpu_hours[User] = tot_gpu_hours[User] + float(gpu_req) * Elapsed

        # Storing Results
        tot_cpu_hours[User] = tot_cpu_hours[User] + AllocCPUS * Elapsed
        ave_core_use[User] = ave_core_use[User] + AllocCPUS * cpu_eff
        ave_cpu_req[User] = ave_cpu_req[User] + AllocCPUS
        ave_time_use[User] = ave_time_use[User] + Elapsed
        ave_time_req[User] = ave_time_req[User] + Timelimit
        ave_cpu_eff[User] = ave_cpu_eff[User] + cpu_eff
        ave_time_eff[User] = ave_time_eff[User] + np.divide(Elapsed, Timelimit, out=np.zeros_like(Elapsed), where=Timelimit!=0)
        ave_wait_time[User] = ave_wait_time[User] + (float(Start) - float(Submit))
    else:
      # Checking for maximum memory in job steps
      if LMaxRSS != "":
        MaxRSS = max(MaxRSS,float(LMaxRSS.replace('G', '')))

  # Fill in last job
  if 'CANCELLED' not in State:
    ave_mem_use[User] = ave_mem_use[User] + MaxRSS
    ave_mem_req[User] = ave_mem_req[User] + ReqMem
    ave_mem_eff[User] = ave_mem_eff[User] + np.divide(MaxRSS, ReqMem, out=np.zeros_like(MaxRSS), where=ReqMem!=0)

for user in nca_cpu:
  # Totals and Averages
  ntot_cpu = nca_cpu[user] + ncd_cpu[user] + nf_cpu[user] + noom_cpu[user] + nto_cpu[user]
  ntot_gpu = nca_gpu[user] + ncd_gpu[user] + nf_gpu[user] + noom_gpu[user] + nto_gpu[user]

  num_j[user] = float(max(num_j[user],1))
  num_jgpu[user] = float(max(num_jgpu[user],1))

  ave_core_use[user] = ave_core_use[user] / num_j[user]
  ave_cpu_req[user] = ave_cpu_req[user] / num_j[user]
  ave_cpu_eff[user] = ave_cpu_eff[user] * 100 / num_j[user]
  ave_mem_use[user] = ave_mem_use[user] / num_j[user]
  ave_mem_req[user] = ave_mem_req[user] / num_j[user]
  ave_mem_eff[user] = ave_mem_eff[user] * 100  / num_j[user]
  ave_time_use[user] = ave_time_use[user] / num_j[user]
  ave_time_req[user] = ave_time_req[user] / num_j[user]
  ave_time_eff[user] = ave_time_eff[user] * 100 / num_j[user]
  ave_wait_time[user] = ave_wait_time[user] / num_j[user]
  ave_gpu_req[user] = ave_gpu_req[user] / num_jgpu[user]

  #Normalize Time to Hours
  ave_time_use[user] = ave_time_use[user] / 3600.0
  ave_time_req[user] = ave_time_req[user] / 3600.0
  ave_wait_time[user] = ave_wait_time[user] / 3600.0
  tot_cpu_hours[user] = tot_cpu_hours[user] / 3600.0
  tot_gpu_hours[user] = tot_gpu_hours[user] / 3600.0

  # Dumping Data
  print(f"{user},{tot_cpu_hours[user]:.2f},{ave_core_use[user]:.1f},{ave_cpu_req[user]:.1f},{ave_cpu_eff[user]:.1f},{ave_mem_use[user]:.1f},{ave_mem_req[user]:.1f},{ave_mem_eff[user]:.1f},{ave_time_use[user]:.2f},{ave_time_req[user]:.2f},{ave_time_eff[user]:.1f},{ave_wait_time[user]:.2f},{tot_gpu_hours[user]:.2f},{ave_gpu_req[user]:.1f},{ntot_cpu},{nca_cpu[user]},{ncd_cpu[user]},{nf_cpu[user]},{noom_cpu[user]},{nto_cpu[user]},{ntot_gpu},{nca_gpu[user]},{ncd_gpu[user]},{nf_gpu[user]},{noom_gpu[user]},{nto_gpu[user]}")
